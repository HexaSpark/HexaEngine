extends Window

enum DataTypes {
	Palette = 0
}

enum ExportTypes {
	Binary = 0,
	Assembly = 1
}

var export_types_ext = {
	ExportTypes.Binary: [".bin", "Binary File"],
	ExportTypes.Assembly: [".0xa", "HexaAssembler Assembly"]
}

@onready var data_type_select: OptionButton = $MarginContainer/VBoxContainer/DataTypeSelect
@onready var data_export_select: OptionButton = $MarginContainer/VBoxContainer/DataExportSelect

func _ready() -> void:
	connect("close_requested", self.hide)
	
	for d_type in DataTypes:
		data_type_select.add_item(d_type, DataTypes.get(d_type))
		
	for e_type in ExportTypes:
		var id = ExportTypes.get(e_type);
		data_export_select.add_item(
			"{0} File (*{1})".format([e_type, export_types_ext[id][0]]),
			id
		)
		
func create_save_window(filter: Array) -> FileDialog:
	var win = FileDialog.new()
	win.use_native_dialog = true;
	win.file_mode = FileDialog.FILE_MODE_SAVE_FILE;5
	win.access = FileDialog.ACCESS_FILESYSTEM;
	win.initial_position = Window.WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN;
	win.add_filter("*{0}".format([filter[0]]), filter[1])
	
	return win
	
func handle_output(path: String, type: DataTypes, export: ExportTypes, win: FileDialog):
	print("Save file path: {0}".format([path]))
	
	if !path.ends_with(export_types_ext[export][0]):
		path += export_types_ext[export][0]
		
	var file = FileAccess.open(path, FileAccess.WRITE);
	file.big_endian = true;
	
	var data = null;
	
	match type:
		DataTypes.Palette:
			data = [];
			for entry in Global.palette_data:
				data.append(Global.rgb565_to_int(entry))
			
	match export:
		ExportTypes.Binary:
			for word in data:
				file.store_16(word)
		ExportTypes.Assembly:
			file.store_string("; This file has been auto generated by HexaEngine. DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING!\n\n")
			file.store_string("palette_table: ")
			
			for word in data:
				file.store_string(".word 0x%X " % [word])
					
			file.store_string("\n")
	
	win.disconnect("file_selected", Callable(self, "handle_output"))
	remove_child(win)
	
	hide()

func _on_export_button_pressed() -> void:
	var type: DataTypes = data_type_select.get_selected_id();
	var export: ExportTypes = data_export_select.get_selected_id();
	
	var win = create_save_window(export_types_ext[export]);
	add_child(win)
	
	win.connect("file_selected", self.handle_output.bind(type, export, win))
	win.popup_centered()
